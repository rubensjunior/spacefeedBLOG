{"version":3,"sources":["config/routing.js","core/routing.js","components/route.js","components/view.js","components/link.js"],"names":["dmx","config","mapping","routing","router","base","routes","getRoutes","this","filter","route","app","name","getBase","document","querySelector","getAttribute","getUrlInfo","url","URL","window","location","hash","slice","origin","path","pathname","query","search","match","parent","replace","i","length","end","keys","pathToRegexp","join","exec","decodeURI","params","reduce","key","index","path1","path2","evalScripts","node","grecaptcha","querySelectorAll","forEach","render","script","newScript","createElement","type","src","innerHTML","parentNode","replaceChild","e","console","error","Component","initialData","isExact","isMatch","loading","attributes","String","default","exact","Boolean","events","show","Event","hide","unauthorized","forbidden","notfound","init","_locationHandler","bind","_error","_content","_keys","_re","props","_shown","addEventListener","destroy","removeEventListener","performUpdate","updatedProps","set","_load","_hide","_abortController","AbortController","fetch","credentials","signal","then","reponse","text","content","_loaded","_show","catch","abort","$node","$parse","dispatchEvent","effects","effect","$destroyChildren","err","debug","event","data","load","__WAPPLER__","_url","includes","headers","response","status","html","assign","warn","internal","_clickHandler","_stateHandler","classList","contains","_navigate","startsWith","title","history","pushState","ctrlKey","button","preventDefault","active","href","split","toggle","items","remove","add"],"mappings":"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","file":"dmxRouting.js","sourcesContent":["dmx.config.mapping['a[href]'] = 'link';\r\n","dmx.routing = {\r\n  router: \"hybrid\", // hybrid (combined server/client routing), path or hash\r\n\r\n  base: \"\", // todo: use when router is path (when page is in a subfolder)\r\n\r\n  routes: [],\r\n\r\n  getRoutes () {\r\n    return this.routes.filter(function (route) {\r\n      return !route.app || route.app == dmx.app.name;\r\n    });\r\n  },\r\n\r\n  getBase () {\r\n    if (this.base) {\r\n      return this.base;\r\n    } else {\r\n      var base = document.querySelector(\"base[href]\");\r\n      if (base) return base.getAttribute(\"href\");\r\n    }\r\n\r\n    return \"\";\r\n  },\r\n\r\n  getUrlInfo () {\r\n    var url =\r\n      this.router == \"hash\"\r\n        ? new URL(window.location.hash.slice(2), window.location.origin)\r\n        : window.location;\r\n\r\n    return {\r\n      path: url.pathname || \"/\",\r\n      query: url.search.slice(1),\r\n      hash: url.hash.slice(1),\r\n    };\r\n  },\r\n\r\n  match (path, routes, parent) {\r\n    path = path || this.getUrlInfo().path;\r\n    routes = routes || this.getRoutes();\r\n\r\n    var base = dmx.routing.getBase();\r\n    if (base) {\r\n      path = path.replace(base, \"\").replace(/^\\/?/, \"/\");\r\n    }\r\n\r\n    for (var i = 0; i < routes.length; i++) {\r\n      if (routes[i].routes) {\r\n        routes[i].end = false;\r\n      }\r\n\r\n      var keys = [];\r\n      var re = dmx.pathToRegexp(\r\n        dmx.routing.join(\r\n          parent && parent.path ? parent.path : \"/\",\r\n          routes[i].path\r\n        ),\r\n        keys,\r\n        routes[i]\r\n      );\r\n      var match = re.exec(decodeURI(path));\r\n\r\n      if (match) {\r\n        return {\r\n          path: match[0],\r\n          params: keys.reduce(function (params, key, index) {\r\n            params[key.name] = match[index + 1];\r\n            return params;\r\n          }, {}),\r\n          url: routes[i].url,\r\n          routes: routes[i].routes || [],\r\n        };\r\n      }\r\n    }\r\n\r\n    return null;\r\n  },\r\n\r\n  join (path1, path2) {\r\n    return path1.replace(/\\/$/, \"\") + \"/\" + path2.replace(/^\\//, \"\");\r\n  },\r\n\r\n  evalScripts(node) {\r\n    if (window.grecaptcha) {\r\n      node.querySelectorAll(\".g-recaptcha\").forEach(node => { grecaptcha.render(node) });\r\n    }\r\n\r\n    try {\r\n      node.querySelectorAll('script[type=\"text/javascript\"],script:not([type])').forEach(script => {\r\n        try {\r\n          const newScript = document.createElement(\"script\");\r\n          newScript.type = \"text/javascript\";\r\n          if (script.src) newScript.src = script.src;\r\n          if (script.innerHTML) newScript.innerHTML = script.innerHTML;\r\n          script.parentNode.replaceChild(newScript, script);\r\n        } catch (e) {\r\n          console.error(\"Error executing script \" + script.src, e);\r\n        }\r\n      });\r\n    } catch (e) {\r\n      console.error(\"An error occurred while trying to execute scripts\", e);\r\n    }\r\n  },\r\n};\r\n","dmx.Component('route', {\r\n\r\n  initialData: {\r\n    isExact: false,\r\n    isMatch: false,\r\n    loading: false,\r\n    params: {}, // Key/value pairs parsed from the URL corresponding to the dynamic segments of the path\r\n    path: '', // The path pattern used to match. Useful for building nested Routes\r\n    url: '',  // The matched portion of the URL. Useful for building nested Links\r\n  },\r\n\r\n  attributes: {\r\n    path: {\r\n      type: String,\r\n      default: '*',\r\n    },\r\n\r\n    exact: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    url: {\r\n      type: String,\r\n      default: '',\r\n    },\r\n  },\r\n\r\n  events: {\r\n    show: Event,\r\n    hide: Event,\r\n    error: Event,\r\n    unauthorized: Event,\r\n    forbidden: Event,\r\n    notfound: Event,\r\n  },\r\n\r\n  init (node) {\r\n    this._locationHandler = this._locationHandler.bind(this);\r\n    this._error = this._error.bind(this);\r\n\r\n    this._content = node.innerHTML;\r\n    this._keys = [];\r\n    this._re = dmx.pathToRegexp(this.props.path, this._keys, { end: this.props.exact });\r\n    this._shown = false;\r\n    \r\n    node.innerHTML = '';\r\n\r\n    window.addEventListener(\"popstate\", this._locationHandler);\r\n    window.addEventListener(\"pushstate\", this._locationHandler);\r\n    window.addEventListener(\"replacestate\", this._locationHandler);\r\n    window.addEventListener('hashchange', this._locationHandler);\r\n\r\n    this._locationHandler();\r\n  },\r\n\r\n  destroy () {\r\n    window.removeEventListener(\"popstate\", this._locationHandler);\r\n    window.removeEventListener(\"pushstate\", this._locationHandler);\r\n    window.removeEventListener(\"replacestate\", this._locationHandler);\r\n    window.removeEventListener('hashchange', this._locationHandler);\r\n  },\r\n\r\n  performUpdate (updatedProps) {\r\n    this.set({\r\n      path: this.props.path,\r\n      isExact: this.props.exact,\r\n    });\r\n  },\r\n\r\n  _load () {\r\n    this._hide();\r\n    this.set('loading', true);\r\n\r\n    this._abortController = new AbortController();\r\n\r\n    const url = this.props.url;\r\n\r\n    fetch(url, {\r\n      credentials: 'same-origin',\r\n      signal: this._abortController.signal,\r\n    }).then(reponse => reponse.text()).then(content => {\r\n      this.set('loading', false);\r\n      this._loaded = url;\r\n      this._content = content;\r\n      this._show();\r\n    }).catch(this._error);\r\n  },\r\n\r\n  _show () {\r\n    if (this._shown) return;\r\n\r\n    if (this._abortController) {\r\n      this._abortController.abort();\r\n    }\r\n\r\n    this.$node.innerHTML = this._content;\r\n    this.$parse();\r\n    \r\n    dmx.routing.evalScripts(this.$node);\r\n\r\n    this._shown = true;\r\n    this.dispatchEvent('show');\r\n  },\r\n\r\n  _hide () {\r\n    if (!this._shown) return;\r\n\r\n    if (this._abortController) {\r\n      this._abortController.abort();\r\n    }\r\n\r\n    if (this.effects) {\r\n      this.effects.forEach((effect) => effect());\r\n      this.effects = null;\r\n    }\r\n    this.$destroyChildren();\r\n\r\n    this._shown = false;\r\n    this.dispatchEvent('hide');\r\n  },\r\n\r\n  _error (err) {\r\n    this.set('loading', false);\r\n    this.dispatchEvent('error');\r\n    if (dmx.debug) console.error(err);\r\n  },\r\n\r\n  _locationHandler (event) {\r\n    const path = dmx.routing.getUrlInfo().path;\r\n    const match = this._re.exec(path);\r\n\r\n    if (match) {\r\n      this.set({\r\n        isMatch: true,\r\n        url: match[0],\r\n        params: this._keys.reduce((params, key, index) => {\r\n          params[key.name] = match[index + 1];\r\n          return params;\r\n        }, {})\r\n      });\r\n\r\n      if (this.data.loading && this.props.url === this._loaded) {\r\n        // Url is loading\r\n        return;\r\n      }\r\n\r\n      if (this.props.url && this.props.url !== this._loaded) {\r\n        this._load();\r\n      } else {\r\n        this._show();\r\n      }\r\n    } else {\r\n      this.set({\r\n        isMatch: false,\r\n        url: '',\r\n        params: {},\r\n      });\r\n\r\n      this._hide();\r\n    }\r\n  },\r\n\r\n});\r\n","dmx.Component(\"view\", {\r\n\r\n  initialData: {\r\n    loading: false,\r\n    params: null,\r\n  },\r\n\r\n  events: {\r\n    load: Event,\r\n    error: Event,\r\n    unauthorized: Event,\r\n    forbidden: Event,\r\n    notfound: Event,\r\n  },\r\n\r\n  init (node) {\r\n    if (window.__WAPPLER__) return;\r\n\r\n    this._locationHandler = this._locationHandler.bind(this);\r\n\r\n    window.addEventListener(\"popstate\", this._locationHandler);\r\n    window.addEventListener(\"pushstate\", this._locationHandler);\r\n    window.addEventListener(\"replacestate\", this._locationHandler);\r\n    window.addEventListener('hashchange', this._locationHandler);\r\n\r\n    if (dmx.routing.router == \"hybrid\") {\r\n      this._url = location.pathname;\r\n    } else {\r\n      this._locationHandler();\r\n    }\r\n  },\r\n\r\n  destroy () {\r\n    window.removeEventListener(\"popstate\", this._locationHandler);\r\n    window.removeEventListener(\"pushstate\", this._locationHandler);\r\n    window.removeEventListener(\"replacestate\", this._locationHandler);\r\n    window.removeEventListener('hashchange', this._locationHandler);\r\n  },\r\n\r\n  _load (url) {\r\n    if (this._url == url && this.data.loading) {\r\n      // Url is loading\r\n      return;\r\n    }\r\n\r\n    if (this._url != url) {\r\n      this.set(\"loading\", true);\r\n      this._url = url;\r\n\r\n      if (this._abortController) {\r\n        this._abortController.abort();\r\n      }\r\n\r\n      this._abortController = new AbortController();\r\n\r\n      fetch(url + (url.includes(\"?\") ? \"&\" : \"?\") + \"fragment=true\", {\r\n        credentials: 'same-origin',\r\n        headers: [['Accept', 'text/fragment+html']],\r\n        signal: this._abortController.signal,\r\n      }).then(response => {\r\n        this.set(\"loading\", false);\r\n\r\n        if (response.status == 200 || response.status == 0) {\r\n          response.text().then(html => {\r\n            this._show(html)\r\n            this.dispatchEvent(\"load\");\r\n            window.dispatchEvent(new Event('load'));\r\n          }).catch(err => {\r\n            this.dispatchEvent('error')\r\n          });\r\n        } else {\r\n          if (response.status == 222) {\r\n            response.text().then(url => {\r\n              location.assign(url);\r\n            }).catch(err => {\r\n              this.dispatchEvent('error')\r\n            });\r\n          } else {\r\n            const events = { 401: 'unauthorized', 403: 'forbidden', 404: 'notfound' };\r\n            this.dispatchEvent(events[response.status] || 'error');\r\n          }\r\n        }\r\n      }).catch(err => {\r\n        console.error(err);\r\n        this.set(\"loading\", false);\r\n        this.dispatchEvent('error');\r\n      });\r\n    }\r\n  },\r\n\r\n  _show (html) {\r\n    if (this.effects) {\r\n      this.effects.forEach((effect) => effect());\r\n      this.effects = null;\r\n    }\r\n\r\n    this.$destroyChildren();\r\n    this.$node.innerHTML = html;\r\n    this.$parse();\r\n\r\n    dmx.routing.evalScripts(this.$node);\r\n  },\r\n\r\n  _locationHandler (event) {\r\n    if (dmx.routing.router == \"hybrid\") {\r\n      this._load(location.pathname);\r\n    } else {\r\n      let path = dmx.routing.getUrlInfo().path;\r\n      let routes = dmx.routing.getRoutes();\r\n      let parent = this.parent;\r\n\r\n      while (parent) {\r\n        if (parent.routes) {\r\n          routes = parent.routes;\r\n          break;\r\n        }\r\n\r\n        parent = parent.parent;\r\n      }\r\n\r\n      const route = dmx.routing.match(path, routes, parent);\r\n\r\n      if (route) {\r\n        this.path = route.path;\r\n        this.routes = route.routes;\r\n        this.set(\"params\", route.params);\r\n        this._load(route.url);\r\n      } else {\r\n        console.warn(\"Route for \" + path + \" not found\");\r\n      }\r\n    }\r\n  },\r\n\r\n});\r\n","dmx.Component('link', {\r\n\r\n  attributes: {\r\n    internal: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n  },\r\n\r\n  init (node) {\r\n    this._clickHandler = this._clickHandler.bind(this);\r\n    this._stateHandler = this._stateHandler.bind(this);\r\n\r\n    node.addEventListener('click', this._clickHandler);\r\n\r\n    if (node.classList.contains('nav-link')) {\r\n      window.addEventListener(\"popstate\", this._stateHandler);\r\n      window.addEventListener(\"pushstate\", this._stateHandler);\r\n      window.addEventListener(\"replacestate\", this._stateHandler);\r\n      window.addEventListener('hashchange', this._stateHandler);\r\n      this._stateHandler();\r\n    }\r\n  },\r\n\r\n  destroy () {\r\n    this.$node.removeEventListener('click', this._clickHandler);\r\n    window.removeEventListener(\"popstate\", this._stateHandler);\r\n    window.removeEventListener(\"pushstate\", this._stateHandler);\r\n    window.removeEventListener(\"replacestate\", this._stateHandler);\r\n    window.removeEventListener('hashchange', this._stateHandler);\r\n  },\r\n\r\n  _navigate () {\r\n    let url = this.$node.getAttribute('href') || '';\r\n\r\n    if (url.startsWith('#')) {\r\n      location.hash = url;\r\n      return;\r\n    }\r\n    \r\n    if (dmx.routing.router === 'hash') {\r\n      url = '#!' + url;\r\n    }\r\n    \r\n    const title = this.$node.title;\r\n    history.pushState({ title: title || document.title }, '', url);\r\n    if (title) document.title = title;\r\n    window.dispatchEvent(new Event('pushstate'));\r\n  },\r\n\r\n  _clickHandler (event) {\r\n    const url = this.$node.getAttribute('href');\r\n\r\n    if ((this.props.internal || url.startsWith('#')) && !event.ctrlKey && event.button === 0) {\r\n      event.preventDefault();\r\n      this._navigate();\r\n    }\r\n  },\r\n\r\n  _stateHandler () {\r\n    const node = this.$node;\r\n    const active = node.href == window.location.href || node.href == window.location.href.split(\"?\")[0].split(\"#\")[0];\r\n\r\n    node.classList.toggle('active', active);\r\n\r\n    if (node.classList.contains('dropdown-item')) {\r\n      const items = node.parentNode.querySelectorAll('.dropdown-item');\r\n      node.classList.remove('active');\r\n\r\n      for (let i = 0; i < items.length; i++) {\r\n        const match = items[i].href == window.location.href || items[i].href == window.location.href.split(\"?\")[0].split(\"#\")[0];\r\n        if (match) {\r\n          items[i].classList.add('active');\r\n          node.classList.add('active');\r\n        } else {\r\n          items[i].classList.remove('active');\r\n        }\r\n      }\r\n    }\r\n  },\r\n\r\n});\r\n"]}